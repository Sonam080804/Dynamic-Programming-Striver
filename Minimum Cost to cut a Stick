Link -> https://leetcode.com/problems/minimum-cost-to-cut-a-stick/description/


class Solution {
public:
    int f(int i , int j , vector<int>&cut , vector<vector<int>>&dp){
        if(dp[i][j] != -1)return dp[i][j] ;

        if(j - i == 1)return dp[i][j] = 0 ;
        
        int ans = INT_MAX ;
        for(int k = i + 1 ; k < j ; k++){
            int cst = f(i , k , cut , dp) + (cut[j] - cut[i]) + f(k , j , cut , dp) ;
            ans = min(ans , cst) ;
        }
        return dp[i][j] = ans ;
    }
    int minCost(int n, vector<int>& cuts) {
        vector<int>cut ;
        cut.push_back(0) ;
        sort(cuts.begin() , cuts.end()) ;
        for(auto it : cuts){
          cut.push_back(it) ;
        }
        cut.push_back(n) ;
        int sz = cut.size() ;
        vector<vector<int>>dp(sz , vector<int>(sz , -1)) ;
        return f(0 , sz - 1, cut , dp) ;
    }
};



class Solution {
public:
    int minCost(int n, vector<int>& cuts) {
        vector<int>cut ;
        cut.push_back(0) ;
        sort(cuts.begin() , cuts.end()) ;
        for(auto it : cuts){
          cut.push_back(it) ;
        }
        cut.push_back(n) ;
        int sz = cut.size() ;
        vector<vector<int>>dp(sz , vector<int>(sz , INT_MAX)) ;
        for(int i = 0 ; i < sz - 1 ; i++){
            dp[i][i + 1] = 0 ;
        }
        for(int len = 2 ; len < sz ; len++){
            for(int i = 0 ; i < sz - len ; i++){
                int j = i + len ;
                for(int k = i + 1 ; k < j ; k++){
                    dp[i][j] = min(dp[i][j] , dp[i][k] + dp[k][j] + cut[j] - cut[i]) ;
                }
            }
        }
        return dp[0][sz - 1] ;
    }
};
