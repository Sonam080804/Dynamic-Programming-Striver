Problem Link -> https://leetcode.com/problems/longest-palindromic-subsequence/


class Solution {
public:
    int LCS(string t1, string t2) {
        int n = t1.size() , m = t2.size() ;
        vector<int>prev(m + 1 , 0) , cur(m + 1 , 0) ;
        
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1  ; j <= m ; j++){
                if(t1[i - 1] == t2[j - 1]){
                    cur[j] = prev[j - 1] + 1 ;
                }
                else
                   cur[j] = max(prev[j] , cur[j - 1]) ;
            }
            prev = cur ;
        }
        return prev[m] ;
    }
    int longestPalindromeSubseq(string s) {
        string t = s ;
        reverse(t.begin() , t.end()) ;
        return LCS(s , t) ;
    }
};
