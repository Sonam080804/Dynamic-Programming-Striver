Problem Link -> https://leetcode.com/problems/longest-palindromic-subsequence/


class Solution {
public:
    int LCS(string t1, string t2) {
        int n = t1.size() , m = t2.size() ;
        vector<int>prev(m + 1 , 0) , cur(m + 1 , 0) ;
        
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1  ; j <= m ; j++){
                if(t1[i - 1] == t2[j - 1]){
                    cur[j] = prev[j - 1] + 1 ;
                }
                else
                   cur[j] = max(prev[j] , cur[j - 1]) ;
            }
            prev = cur ;
        }
        return prev[m] ;
    }
    int longestPalindromeSubseq(string s) {
        string t = s ;
        reverse(t.begin() , t.end()) ;
        return LCS(s , t) ;
    }
};



// Print Longest Pallindromic Subsequence 



class Solution {
public:
    string LCS(string t1, string t2) {
        int n = t1.size() , m = t2.size() ;
        vector<vector<int>>dp(n + 1 , vector<int>(m + 1 , 0)) ;
        
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1  ; j <= m ; j++){
                if(t1[i - 1] == t2[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1] + 1 ;
                }
                else
                   dp[i][j] = max(dp[i - 1][j] , dp[i][j - 1]) ;
            }
        }

        int i = n , j = m ;
        string ans ;
        while(i > 0 && j > 0){
            if(t1[i - 1] == t2[j - 1]){
                ans.push_back(t1[i - 1]) ;
                i-- ;
                j-- ;
            }
            else{
                if(dp[i - 1][j] > dp[i][j - 1]){
                    i-- ;
                }
                else{
                    j-- ;
                }
            }
        }

        return ans ;
   
    }
    string longestPalindromeSubseq(string s) {
        string t = s ;
        reverse(t.begin() , t.end()) ;
        return LCS(s , t) ;
    }
};


// Minimum insertions to make string palindrome

Problem Link -> https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/


class Solution {
public:
    int LCS(string t1, string t2) {
        int n = t1.size() , m = t2.size() ;
        vector<int>prev(m + 1 , 0) , cur(m + 1 , 0) ;
        
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1  ; j <= m ; j++){
                if(t1[i - 1] == t2[j - 1]){
                    cur[j] = prev[j - 1] + 1 ;
                }
                else
                   cur[j] = max(prev[j] , cur[j - 1]) ;
            }
            prev = cur ;
        }
        return prev[m] ;
    }
    int minInsertions(string s) {
        string t = s ;
        reverse(t.begin() , t.end()) ;
        int lcs = LCS(s , t) ;
        return s.size() - lcs ;
    }
};
