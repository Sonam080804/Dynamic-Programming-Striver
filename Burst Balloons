Link -> https://leetcode.com/problems/burst-balloons/description/

class Solution {
public:
    int f(int i , int j , vector<int>&num , vector<vector<int>>&dp){
        if(dp[i][j] != -1)return dp[i][j] ;
        
        if(j - i == 1)return dp[i][j] = 0 ;

        int ans = 0 ;
        for(int k = i + 1 ; k < j ; k++){
            int cst = num[i] * num[k] * num[j] + f(i , k , num , dp) + f(k , j , num , dp) ;
            ans = max(ans , cst) ;
        }
        return dp[i][j] = ans ;
    }
    int maxCoins(vector<int>& nums) {
        vector<int>num ;
        num.push_back(1) ;
        for(auto it : nums){
           num.push_back(it) ;
        }
        num.push_back(1) ;
        int n = num.size() ;
        vector<vector<int>>dp(n , vector<int>(n , -1)) ;
        return f(0 , n - 1 , num , dp) ;
    }
};



class Solution {
public:
    int maxCoins(vector<int>& nums) {
        vector<int>num ;
        num.push_back(1) ;
        for(auto it : nums){
           num.push_back(it) ;
        }
        num.push_back(1) ;
        int n = num.size() ;
        vector<vector<int>>dp(n , vector<int>(n , 0)) ;
        for(int len = 2 ; len < n ; len++){
            for(int i = 0 ; i < n - len ; i++){
                int j = i + len ;
                for(int k = i + 1 ; k < j ; k++){
                    dp[i][j] = max(dp[i][j] , num[i]*num[k]*num[j] + dp[i][k] + dp[k][j]) ;
                }
            }
        }
        return dp[0][n - 1] ;
    }
};
