Problem Link -> https://leetcode.com/problems/edit-distance/description/


//Memorisation

class Solution {
public:
    int f(int i , int j , string& s , string& t , vector<vector<int>>&dp){

        if(j < 0)return i + 1 ;
        if(i < 0)return j + 1 ;

        if(dp[i][j] != -1)return dp[i][j] ;

        if(s[i] == t[j]){
            return dp[i][j] = f(i - 1 , j - 1 , s , t , dp) ;
        }
        else{
            return dp[i][j] = min(f(i , j - 1 , s , t , dp) 
            , min(f(i - 1 , j , s , t , dp) 
            , f(i - 1 , j - 1 , s , t , dp))) + 1 ;
        }
    }
    int minDistance(string s, string t) {
        int n = s.size() , m = t.size() ;
        vector<vector<int>>dp(n , vector<int>(m , -1)) ;
        return f(n - 1 , m - 1 , s , t , dp) ;
    }
};


// Index Shifting


class Solution {
public:
    int f(int i , int j , string& s , string& t , vector<vector<int>>&dp){

        if(j == 0)return i ;
        if(i == 0)return j ;

        if(dp[i][j] != -1)return dp[i][j] ;

        if(s[i - 1] == t[j - 1]){
            return dp[i][j] = f(i - 1 , j - 1 , s , t , dp) ;
        }
        else{
            return dp[i][j] = min(f(i , j - 1 , s , t , dp) 
            , min(f(i - 1 , j , s , t , dp) 
            , f(i - 1 , j - 1 , s , t , dp))) + 1 ;
        }
    }
    int minDistance(string s, string t) {
        int n = s.size() , m = t.size() ;
        vector<vector<int>>dp(n + 1 , vector<int>(m + 1 , -1)) ;
        return f(n , m , s , t , dp) ;
    }
};


// Tabulation

class Solution {
public:
    int minDistance(string s, string t) {
        int n = s.size() , m = t.size() ;
        vector<vector<int>>dp(n + 1 , vector<int>(m + 1 , 0)) ;
        for(int i = 0 ; i <= n ; i++){
            dp[i][0] = i ;
        }
        for(int j = 0 ; j <= m ; j++){
            dp[0][j] = j ;
        }
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                if(s[i - 1] == t[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1] ;
                }
                else{
                    dp[i][j] = 1 + min(dp[i][j - 1] , min(dp[i - 1][j] , dp[i - 1][j - 1])) ;
                }
            }
        }
        return dp[n][m] ;
    }
};

// Using 1D array

class Solution {
public:
    int minDistance(string s, string t) {
        int n = s.size() , m = t.size() ;
        vector<int>prev(m + 1 , 0) , cur(m + 1 , 0) ;
        for(int j = 0 ; j <= m ; j++){
            prev[j] = j ;
        }
        for(int i = 1 ; i <= n ; i++){
            cur[0] = i ;
            for(int j = 1 ; j <= m ; j++){
                if(s[i - 1] == t[j - 1]){
                    cur[j] = prev[j - 1] ;
                }
                else{
                    cur[j] = 1 + min(cur[j - 1] , min(prev[j] , prev[j - 1])) ;
                }
            }
            prev = cur ;
        }
        return prev[m] ;
    }
};
