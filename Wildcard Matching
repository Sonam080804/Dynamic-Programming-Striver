Problem Link -> https://leetcode.com/problems/wildcard-matching/


// Memorisation

class Solution {
public:
    int chek(int i , int j , string s , string p , vector<vector<int>>&dp){
        if(i < 0 && j < 0 )return true ;
        if(j < 0)return false ;
        if(i < 0){
            return (count(p.begin() , p.begin() + j + 1 , '*') == (j + 1)) ;
        }
        if(dp[i][j] != -1)return dp[i][j] ;
        if(s[i] == p[j] || p[j] == '?'){
            return dp[i][j] = chek(i - 1 , j - 1 , s , p , dp) ;
        }
        else if(p[j] == '*'){
            return dp[i][j] = chek(i , j - 1 , s , p , dp) || chek(i - 1 , j , s , p , dp) ;
        }
        return dp[i][j] = 0 ;
    }
    bool isMatch(string s, string p) {
        int n = s.size() ;
        int m = p.size() ;
        vector<vector<int>>dp(n , vector<int>(m , -1)) ;
        return chek(n - 1 , m - 1 , s , p , dp) ;
    }
};


// Index shifting

class Solution {
public:
    int chek(int i , int j , string s , string p , vector<vector<int>>&dp){
        if(dp[i][j] != -1)return dp[i][j] ;
        if(i == 0 && j == 0 )return 1 ;
        if(j == 0)return 0 ;
        if(i == 0){
            return (count(p.begin() , p.begin() + j , '*') == (j)) ;
        }
        if(s[i - 1] == p[j - 1] || p[j - 1] == '?'){
            return dp[i][j] = chek(i - 1 , j - 1 , s , p , dp) ;
        }
        else if(p[j - 1] == '*'){
            return dp[i][j] = chek(i , j - 1 , s , p , dp) || chek(i - 1 , j , s , p , dp) ;
        }
        return dp[i][j] = 0 ;
    }
    bool isMatch(string s, string p) {
        int n = s.size() ;
        int m = p.size() ;
        vector<vector<int>>dp(n + 1 , vector<int>(m + 1 , -1)) ;
        return chek(n , m , s , p , dp) ;
    }
};

// Tabulation


class Solution {
public:
    bool isMatch(string s, string p) {
        int n = s.size() ;
        int m = p.size() ;
        vector<vector<int>>dp(n + 1 , vector<int>(m + 1 , 0)) ;
        dp[0][0] = 1 ;
        for(int j = 1 ; j <= m ; j++){
           if(p[j - 1] == '*')dp[0][j] = 1 ;
           else break ;
        }
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                if(s[i - 1] == p[j - 1] || p[j - 1] == '?'){
                    dp[i][j] = dp[i - 1][j - 1] ;
                }
                else if(p[j - 1] == '*'){
                    dp[i][j] = dp[i - 1][j] | dp[i][j - 1] ;
                }
                else{
                    dp[i][j] = 0 ;
                }
            }
        }
        return dp[n][m] ;
    }
};

// Using 1D array

class Solution {
public:
    bool isMatch(string s, string p) {
        int n = s.size() ;
        int m = p.size() ;
        vector<int>prev(m + 1 , 0) , cur(m + 1 , 0) ;
        prev[0] = 1 ;
        for(int j = 1 ; j <= m ; j++){
           if(p[j - 1] == '*')prev[j] = 1 ;
           else break ;
        }
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                if(s[i - 1] == p[j - 1] || p[j - 1] == '?'){
                    cur[j] = prev[j - 1] ;
                }
                else if(p[j - 1] == '*'){
                    cur[j] = prev[j] | cur[j - 1] ;
                }
                else{
                    cur[j] = 0 ;
                }
            }
            prev = cur ;
        }
        return prev[m] ;
    }
};


