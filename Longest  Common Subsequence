Problem Link -> https://leetcode.com/problems/longest-common-subsequence/description/


// Memorisation 

class Solution {
public:
    int LCS(int i , int j , string&t1 , string&t2 , vector<vector<int>>&dp){

        if(i < 0 || j < 0)return 0 ;

        if(dp[i][j] != -1)return dp[i][j] ;

        if(t1[i] == t2[j]){
            return dp[i][j] = LCS(i - 1 , j - 1 , t1 , t2 , dp) + 1 ;
        }
        return dp[i][j] = max(LCS(i - 1 , j , t1 , t2 , dp) , LCS(i , j - 1 , t1 , t2 , dp)) ;
    }
    int longestCommonSubsequence(string t1, string t2) {
        int n = t1.size() , m = t2.size() ;
        vector<vector<int>>dp(n , vector<int>(m + 1 , -1)) ;
        return LCS(n - 1 , m - 1 , t1 , t2 , dp) ;
    }
};

// Index Shifting by 1 

class Solution {
public:
    int LCS(int i , int j , string&t1 , string&t2 , vector<vector<int>>&dp){

        if(i == 0 || j == 0)return 0 ;

        if(dp[i][j] != -1)return dp[i][j] ;

        if(t1[i - 1] == t2[j - 1]){
            return dp[i][j] = LCS(i - 1 , j - 1 , t1 , t2 , dp) + 1 ;
        }
        return dp[i][j] = max(LCS(i - 1 , j , t1 , t2 , dp) , LCS(i , j - 1 , t1 , t2 , dp)) ;
    }
    int longestCommonSubsequence(string t1, string t2) {
        int n = t1.size() , m = t2.size() ;
        vector<vector<int>>dp(n + 1 , vector<int>(m + 1 , -1)) ;
        return LCS(n , m , t1 , t2 , dp) ;
    }
};

// Tabulation 

// 1. using 2D vector

class Solution {
public:
    
    int longestCommonSubsequence(string t1, string t2) {
        int n = t1.size() , m = t2.size() ;
        vector<vector<int>>dp(n + 1 , vector<int>(m + 1 , 0)) ;
        
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1  ; j <= m ; j++){
                if(t1[i - 1] == t2[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1] + 1 ;
                }
                else
                   dp[i][j] = max(dp[i - 1][j] , dp[i][j - 1]) ;
            }
        }
        return dp[n][m] ;
    }
};



// 2. Using 1D vector (prev , curr concept)


class Solution {
public:
    
    int longestCommonSubsequence(string t1, string t2) {
        int n = t1.size() , m = t2.size() ;
        vector<int>prev(m + 1 , 0) , cur(m + 1 , 0) ;
        
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1  ; j <= m ; j++){
                if(t1[i - 1] == t2[j - 1]){
                    cur[j] = prev[j - 1] + 1 ;
                }
                else
                   cur[j] = max(prev[j] , cur[j - 1]) ;
            }
            prev = cur ;
        }
        return prev[m] ;
    }
};



